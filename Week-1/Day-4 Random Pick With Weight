Given an array w of positive integers, where w[i] describes the weight of index i, write a function pickIndex which randomly picks an index in proportion to its weight.

Note:

1 <= w.length <= 10000
1 <= w[i] <= 10^5
pickIndex will be called at most 10000 times.
Example 1:

Input: 
["Solution","pickIndex"]
[[[1]],[]]
Output: [null,0]
Example 2:

Input: 
["Solution","pickIndex","pickIndex","pickIndex","pickIndex","pickIndex"]
[[[1,3]],[],[],[],[],[]]
Output: [null,0,1,1,1,0]
Explanation of Input Syntax:

The input is two lists: the subroutines called and their arguments. Solution's constructor has one argument, the array w. pickIndex has no arguments. Arguments are always wrapped with a list, even if there aren't any.

-----------------------------------------------------------------------solution-------------------------------------------------------------
class Solution {
 
/**
 * Your Solution object will be instantiated and called as such:
 * Solution obj = new Solution(w);
 * int param_1 = obj.pickIndex();
 */ int[] sum;

    public Solution(int[] w) {
        for(int i = 1; i < w.length; i++) {
            w[i] = w[i - 1] + w[i];
        }
        sum = w;
    }
    
    public int pickIndex() {
        int random = ThreadLocalRandom.current().nextInt(1, sum[sum.length - 1] + 1);
        return binarySearch(random, 0, sum.length - 1);
    }
    
    int binarySearch(int target, int start, int end) {
        int mid = (start + end) / 2;
        int rangeStart = mid == 0 ? 1 : sum[mid - 1] + 1;
        int rangeEnd = sum[mid];
        
        if(target >= rangeStart && target <= rangeEnd) {
            return mid;
        }
        
        if(target < rangeStart) {
            return binarySearch(target, start, mid - 1);
        }
        
        return binarySearch(target, mid + 1, end);
    }
}
